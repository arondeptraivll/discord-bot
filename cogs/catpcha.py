# cogs/verification_cog.py
import discord
from discord.ext import commands, tasks
import asyncio
import random
import io
from datetime import datetime, timedelta

# Import PIL v·ªõi fallback
try:
    from PIL import Image, ImageDraw, ImageFont
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False
    print("‚ö†Ô∏è PIL not available, using text-based captcha")

class VerificationCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.channel_id = 1402467575299834056  # ID k√™nh chat
        self.role_id = 1402466671544766494     # ID role
        self.verification_message_id = None    # L∆∞u ID tin nh·∫Øn verify
        
    # Event khi user m·ªõi v√†o server
    @commands.Cog.listener()
    async def on_member_join(self, member):
        try:
            # G√°n role cho user m·ªõi
            role = member.guild.get_role(self.role_id)
            if role:
                await member.add_roles(role)
                print(f"‚úÖ Added verification role to {member.name}")
            
            # Ki·ªÉm tra v√† g·ª≠i tin nh·∫Øn verify ngay l·∫≠p t·ª©c
            await self.check_and_send_verification(member.guild)
                
        except Exception as e:
            print(f"‚ùå Error in on_member_join: {e}")

    async def check_and_send_verification(self, guild):
        """Ki·ªÉm tra v√† g·ª≠i tin nh·∫Øn verification n·∫øu c·∫ßn"""
        try:
            channel = guild.get_channel(self.channel_id)
            if not channel:
                print(f"‚ùå Channel {self.channel_id} not found")
                return
                
            role = guild.get_role(self.role_id)
            if not role:
                print(f"‚ùå Role {self.role_id} not found")
                return
            
            # Ki·ªÉm tra xem c√≥ ai c√≥ role verification kh√¥ng
            members_with_role = [member for member in guild.members if role in member.roles]
            
            if not members_with_role:
                # Kh√¥ng c√≥ ai c·∫ßn verify, x√≥a tin nh·∫Øn verify n·∫øu c√≥
                if self.verification_message_id:
                    try:
                        message = await channel.fetch_message(self.verification_message_id)
                        await message.delete()
                        self.verification_message_id = None
                        print("üóëÔ∏è Deleted verification message (no users need verification)")
                    except:
                        pass
                return
            
            # Ki·ªÉm tra xem tin nh·∫Øn verify ƒë√£ t·ªìn t·∫°i ch∆∞a
            verification_exists = False
            if self.verification_message_id:
                try:
                    await channel.fetch_message(self.verification_message_id)
                    verification_exists = True
                except:
                    self.verification_message_id = None
            
            # N·∫øu ch∆∞a c√≥ tin nh·∫Øn verify th√¨ g·ª≠i m·ªõi
            if not verification_exists:
                embed = discord.Embed(
                    title="üõ°Ô∏è X√°c Th·ª±c T√†i Kho·∫£n",
                    description="Vui l√≤ng click v√†o button ƒë·ªÉ ki·ªÉm tra b·∫°n c√≥ ph·∫£i robot kh√¥ng?",
                    color=0x00ff00
                )
                view = VerifyView(self.bot, self.role_id, self)
                message = await channel.send(embed=embed, view=view)
                self.verification_message_id = message.id
                print("‚úÖ Sent verification message")
                
        except Exception as e:
            print(f"‚ùå Error in check_and_send_verification: {e}")

    # Event khi user r·ªùi server
    @commands.Cog.listener()
    async def on_member_remove(self, member):
        # Ki·ªÉm tra l·∫°i xem c√≥ c·∫ßn x√≥a tin nh·∫Øn verify kh√¥ng
        await asyncio.sleep(1)  # Ch·ªù 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o member ƒë√£ ƒë∆∞·ª£c remove
        await self.check_and_send_verification(member.guild)

class VerifyView(discord.ui.View):
    def __init__(self, bot, role_id, cog):
        super().__init__(timeout=None)
        self.bot = bot
        self.role_id = role_id
        self.cog = cog

    @discord.ui.button(label='Verify', style=discord.ButtonStyle.success, emoji='‚úÖ')
    async def verify_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            # Ki·ªÉm tra user c√≥ role verification kh√¥ng
            role = interaction.guild.get_role(self.role_id)
            if not role or role not in interaction.user.roles:
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c·∫ßn x√°c th·ª±c!", ephemeral=True)
                return

            # Ki·ªÉm tra tu·ªïi t√†i kho·∫£n
            account_age = datetime.utcnow() - interaction.user.created_at
            
            if account_age >= timedelta(days=7):
                # T√†i kho·∫£n >= 7 ng√†y, pass lu√¥n
                await interaction.user.remove_roles(role)
                embed = discord.Embed(
                    title="‚úÖ X√°c Th·ª±c Th√†nh C√¥ng!",
                    description="T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng!",
                    color=0x00ff00
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                print(f"‚úÖ {interaction.user.name} passed verification (account age: {account_age.days} days)")
                
                # Ki·ªÉm tra l·∫°i xem c√≥ c·∫ßn x√≥a tin nh·∫Øn verify kh√¥ng
                await self.cog.check_and_send_verification(interaction.guild)
                
            else:
                # T√†i kho·∫£n < 7 ng√†y, c·∫ßn captcha
                try:
                    if PIL_AVAILABLE:
                        captcha_view = CaptchaView(self.bot, self.role_id, self.cog)
                        captcha_data = await captcha_view.generate_captcha()
                        
                        embed = discord.Embed(
                            title="ü§ñ Vui L√≤ng Gi·∫£i Captcha D∆∞·ªõi",
                            description="H√£y nh·∫≠p k·∫øt qu·∫£ ph√©p t√≠nh trong h√¨nh:",
                            color=0xff9900
                        )
                        
                        if captcha_data['image']:
                            file = discord.File(fp=captcha_data['image'], filename="captcha.png")
                            embed.set_image(url="attachment://captcha.png")
                            await interaction.response.send_message(embed=embed, file=file, view=captcha_view, ephemeral=True)
                        else:
                            # Fallback: text-based captcha
                            embed.description = f"H√£y t√≠nh: **{captcha_data['question']}**"
                            await interaction.response.send_message(embed=embed, view=captcha_view, ephemeral=True)
                    else:
                        # Text-based captcha khi kh√¥ng c√≥ PIL
                        captcha_view = TextCaptchaView(self.bot, self.role_id, self.cog)
                        question, answer = captcha_view.generate_text_captcha()
                        
                        embed = discord.Embed(
                            title="ü§ñ Vui L√≤ng Gi·∫£i Captcha",
                            description=f"H√£y t√≠nh: **{question}**",
                            color=0xff9900
                        )
                        await interaction.response.send_message(embed=embed, view=captcha_view, ephemeral=True)
                    
                    print(f"üìù {interaction.user.name} needs captcha (account age: {account_age.days} days)")
                    
                except Exception as captcha_error:
                    print(f"‚ùå Error generating captcha: {captcha_error}")
                    await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o captcha, vui l√≤ng th·ª≠ l·∫°i!", ephemeral=True)
                
        except Exception as e:
            print(f"‚ùå Error in verify button: {e}")
            try:
                await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!", ephemeral=True)
            except:
                pass

class CaptchaView(discord.ui.View):
    def __init__(self, bot, role_id, cog):
        super().__init__(timeout=300)  # 5 ph√∫t timeout
        self.bot = bot
        self.role_id = role_id
        self.cog = cog
        self.answer = None
        self.question = None

    async def generate_captcha(self):
        """T·∫°o captcha - ∆∞u ti√™n h√¨nh ·∫£nh, fallback text"""
        try:
            # T·∫°o ph√©p t√≠nh ng·∫´u nhi√™n
            num1 = random.randint(10, 30)
            num2 = random.randint(5, 20)
            operation = random.choice(['+', '-'])
            
            if operation == '+':
                self.answer = num1 + num2
                self.question = f"{num1} + {num2}"
            else:
                # ƒê·∫£m b·∫£o k·∫øt qu·∫£ kh√¥ng √¢m
                if num1 < num2:
                    num1, num2 = num2, num1
                self.answer = num1 - num2
                self.question = f"{num1} - {num2}"

            if not PIL_AVAILABLE:
                return {
                    'image': None,
                    'question': self.question,
                    'answer': self.answer
                }

            # T·∫°o h√¨nh ·∫£nh ƒë∆°n gi·∫£n cho Render
            width, height = 200, 60
            img = Image.new('RGB', (width, height), color=(240, 240, 240))
            draw = ImageDraw.Draw(img)
            
            # S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh c·ªßa PIL
            try:
                font = ImageFont.load_default()
            except:
                font = None
            
            # Text hi·ªÉn th·ªã
            text = f"{self.question} = ?"
            
            # V·∫Ω text ·ªü gi·ªØa
            if font:
                bbox = draw.textbbox((0, 0), text, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]
            else:
                # Estimate size if no font
                text_width = len(text) * 6
                text_height = 11
            
            x = (width - text_width) // 2
            y = (height - text_height) // 2
            
            # V·∫Ω text
            draw.text((x, y), text, font=font, fill=(50, 50, 50))
            
            # Th√™m m·ªôt √≠t nhi·ªÖu ƒë∆°n gi·∫£n
            for _ in range(20):
                x_noise = random.randint(0, width)
                y_noise = random.randint(0, height)
                draw.point((x_noise, y_noise), fill=(200, 200, 200))
            
            # Chuy·ªÉn th√†nh bytes
            img_bytes = io.BytesIO()
            img.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            
            return {
                'image': img_bytes,
                'question': self.question,
                'answer': self.answer
            }
            
        except Exception as e:
            print(f"‚ùå Error generating image captcha: {e}")
            # Fallback to text
            return {
                'image': None,
                'question': self.question,
                'answer': self.answer
            }

    @discord.ui.button(label='Gi·∫£i Captcha', style=discord.ButtonStyle.primary, emoji='üîç')
    async def solve_captcha(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = CaptchaModal(self.bot, self.role_id, self.answer, self.cog)
        await interaction.response.send_modal(modal)

class TextCaptchaView(discord.ui.View):
    """Text-based captcha cho tr∆∞·ªùng h·ª£p kh√¥ng c√≥ PIL"""
    def __init__(self, bot, role_id, cog):
        super().__init__(timeout=300)
        self.bot = bot
        self.role_id = role_id
        self.cog = cog
        self.answer = None

    def generate_text_captcha(self):
        """T·∫°o captcha d·∫°ng text"""
        num1 = random.randint(5, 25)
        num2 = random.randint(5, 20)
        operation = random.choice(['+', '-'])
        
        if operation == '+':
            self.answer = num1 + num2
            question = f"{num1} + {num2}"
        else:
            if num1 < num2:
                num1, num2 = num2, num1
            self.answer = num1 - num2
            question = f"{num1} - {num2}"
        
        return question, self.answer

    @discord.ui.button(label='Gi·∫£i Captcha', style=discord.ButtonStyle.primary, emoji='üîç')
    async def solve_captcha(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = CaptchaModal(self.bot, self.role_id, self.answer, self.cog)
        await interaction.response.send_modal(modal)

class CaptchaModal(discord.ui.Modal):
    def __init__(self, bot, role_id, correct_answer, cog):
        super().__init__(title="Gi·∫£i Captcha")
        self.bot = bot
        self.role_id = role_id
        self.correct_answer = correct_answer
        self.cog = cog

    answer = discord.ui.TextInput(
        label='K·∫øt qu·∫£ ph√©p t√≠nh:',
        placeholder='Nh·∫≠p k·∫øt qu·∫£...',
        required=True,
        max_length=10
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            user_answer = int(self.answer.value.strip())
            
            if user_answer == self.correct_answer:
                # ƒê√∫ng - g·ª° role
                role = interaction.guild.get_role(self.role_id)
                if role and role in interaction.user.roles:
                    await interaction.user.remove_roles(role)
                    
                embed = discord.Embed(
                    title="‚úÖ Captcha Th√†nh C√¥ng!",
                    description="B·∫°n ƒë√£ gi·∫£i captcha th√†nh c√¥ng v√† ƒë∆∞·ª£c x√°c th·ª±c!",
                    color=0x00ff00
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                print(f"‚úÖ {interaction.user.name} solved captcha correctly")
                
                # Ki·ªÉm tra l·∫°i xem c√≥ c·∫ßn x√≥a tin nh·∫Øn verify kh√¥ng
                await self.cog.check_and_send_verification(interaction.guild)
                
            else:
                # Sai - th·ª≠ l·∫°i
                embed = discord.Embed(
                    title="‚ùå Captcha Sai!",
                    description="K·∫øt qu·∫£ kh√¥ng ch√≠nh x√°c. Vui l√≤ng th·ª≠ l·∫°i!",
                    color=0xff0000
                )
                
                # T·∫°o captcha m·ªõi
                if PIL_AVAILABLE:
                    captcha_view = CaptchaView(self.bot, self.role_id, self.cog)
                    captcha_data = await captcha_view.generate_captcha()
                    
                    if captcha_data['image']:
                        file = discord.File(fp=captcha_data['image'], filename="captcha.png")
                        embed.set_image(url="attachment://captcha.png")
                        await interaction.response.send_message(embed=embed, file=file, view=captcha_view, ephemeral=True)
                    else:
                        embed.description += f"\n\nH√£y t√≠nh: **{captcha_data['question']}**"
                        await interaction.response.send_message(embed=embed, view=captcha_view, ephemeral=True)
                else:
                    captcha_view = TextCaptchaView(self.bot, self.role_id, self.cog)
                    question, answer = captcha_view.generate_text_captcha()
                    embed.description += f"\n\nH√£y t√≠nh: **{question}**"
                    await interaction.response.send_message(embed=embed, view=captcha_view, ephemeral=True)
                
                print(f"‚ùå {interaction.user.name} failed captcha")
                
        except ValueError:
            embed = discord.Embed(
                title="‚ùå L·ªói!",
                description="Vui l√≤ng ch·ªâ nh·∫≠p s·ªë!",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            print(f"‚ùå Error in captcha submit: {e}")
            try:
                await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra!", ephemeral=True)
            except:
                pass

async def setup(bot):
    await bot.add_cog(VerificationCog(bot))
