# ai_cog.py
import discord
from discord.ext import commands
import os
import google.generativeai as genai
from google.api_core import exceptions as google_exceptions
import validators
import aiohttp
import io
from PIL import Image

# C·∫•u h√¨nh API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# T·∫Øt b·ªô l·ªçc an to√†n cho model vƒÉn b·∫£n
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

# Ch·ªâ c·∫•u h√¨nh v√† t·∫°o model n·∫øu c√≥ API KEY
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫•u h√¨nh Google Gemini API: {e}")
        GEMINI_API_KEY = None
else:
    print("‚ö†Ô∏è C·∫¢NH B√ÅO: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. L·ªánh !askai s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")

async def fetch_image_from_url(url: str):
    """T·∫£i d·ªØ li·ªáu ·∫£nh t·ª´ URL v√† tr·∫£ v·ªÅ PIL Image object."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    image_bytes = await response.read()
                    mime_type = response.headers.get('Content-Type')
                    if mime_type and mime_type.startswith('image/'):
                        # Chuy·ªÉn bytes th√†nh PIL Image
                        image = Image.open(io.BytesIO(image_bytes))
                        return image, None
                    else:
                        return None, "Invalid content type"
                else:
                    return None, f"HTTP Status {response.status}"
    except Exception as e:
        return None, str(e)

class AiCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        if GEMINI_API_KEY:
            # Gi·ªØ nguy√™n model m·∫°nh nh·∫•t cho vi·ªác ph√¢n t√≠ch text v√† h√¨nh ·∫£nh
            self.model = genai.GenerativeModel(
                model_name='gemini-2.5-pro',
                safety_settings=safety_settings
            )
        else:
            self.model = None

    @commands.command(name='askai')
    @commands.cooldown(1, 15, commands.BucketType.user)
    async def ask_ai(self, ctx: commands.Context, *, full_input: str):
        if not self.model:
            await ctx.reply("‚ùå R·∫•t ti·∫øc, t√≠nh nƒÉng AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch do thi·∫øu API Key.")
            return

        async with ctx.typing():
            parts = full_input.strip().split()
            image_url = None
            prompt = ""

            if parts and validators.url(parts[-1]):
                image_url = parts.pop(-1)
                prompt = " ".join(parts)
            else:
                prompt = " ".join(parts)

            if not prompt:
                await ctx.reply(
                    "‚ö†Ô∏è **L·ªói:** B·∫°n ph·∫£i cung c·∫•p c√¢u h·ªèi.\n"
                    "**C√∫ ph√°p ƒë√∫ng:** `!askai [c√¢u h·ªèi b·∫Øt bu·ªôc] [url_h√¨nh_·∫£nh t√πy ch·ªçn]`",
                    delete_after=10
                )
                return

            content_parts = []
            image_to_display = None

            # Th√™m prompt v√†o content_parts tr∆∞·ªõc
            content_parts.append(prompt)

            if image_url:
                image, error = await fetch_image_from_url(image_url)
                if image:
                    image_to_display = image_url
                    # Th√™m PIL Image object v√†o content_parts
                    content_parts.append(image)
                else:
                    await ctx.reply(f"‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω h√¨nh ·∫£nh t·ª´ URL. L√Ω do: `{error}`")
                    return

            try:
                # G·ªçi generate_content v·ªõi list c√°c ph·∫ßn
                response = self.model.generate_content(content_parts)
                
                # L·∫•y text t·ª´ response
                ai_response_text = response.text

                if len(ai_response_text) > 4000:
                    ai_response_text = ai_response_text[:4000] + "\n... (N·ªôi dung qu√° d√†i ƒë√£ ƒë∆∞·ª£c c·∫Øt b·ªõt)"

                embed = discord.Embed(
                    title=f"üí¨ C√¢u tr·∫£ l·ªùi cho {ctx.author.display_name}",
                    description=ai_response_text,
                    color=discord.Color.purple()
                )
                
                if image_to_display:
                    embed.set_image(url=image_to_display)
                
                embed.set_footer(text="Cung c·∫•p b·ªüi HaiGPT", icon_url="https://i.pinimg.com/736x/72/40/32/7240322b1bad16b56925b872c795e9a0.jpg")
                
                await ctx.reply(embed=embed)
                
            except Exception as e:
                print(f"L·ªói khi g·ªçi Gemini API: {type(e).__name__} - {e}")
                error_embed = discord.Embed(
                    title="ü§ñ ƒê√£ c√≥ l·ªói b·∫•t ng·ªù",
                    description="Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. ƒêi·ªÅu n√†y c√≥ th·ªÉ do:\n- L·ªói t·ª´ m√°y ch·ªß AI.\n- H√¨nh ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c qu√° l·ªõn.\n- C√¢u h·ªèi c·ªßa b·∫°n vi ph·∫°m ch√≠nh s√°ch n·ªôi dung c·ªßa AI.",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=error_embed)
                return 

    @ask_ai.error
    async def askai_error(self, ctx: commands.Context, error):
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.reply(f"‚è≥ B·∫°n ƒëang thao t√°c qu√° nhanh! Vui l√≤ng ch·ªù **{error.retry_after:.1f} gi√¢y**.", delete_after=5)
        elif isinstance(error, commands.MissingRequiredArgument):
            await ctx.reply(
                "‚ö†Ô∏è **B·∫°n qu√™n nh·∫≠p c√¢u h·ªèi r·ªìi!**\n"
                "**C√∫ ph√°p:** `!askai [c√¢u h·ªèi b·∫Øt bu·ªôc] [url_h√¨nh_·∫£nh t√πy ch·ªçn]`", 
                delete_after=7
            )
        else:
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi askai_error: {error}")
            await ctx.reply("ƒê√£ x·∫£y ra m·ªôt l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.", delete_after=5)

async def setup(bot: commands.Bot):
    if GEMINI_API_KEY:
        await bot.add_cog(AiCog(bot))
    else:
        pass
