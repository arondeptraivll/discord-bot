# ai_cog.py
import discord
from discord.ext import commands
import os
import google.generativeai as genai
from google.api_core import exceptions as google_exceptions
import validators
import aiohttp
import io
from PIL import Image
import asyncio
import traceback
from datetime import datetime, timedelta

# C·∫•u h√¨nh API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# T·∫Øt b·ªô l·ªçc an to√†n cho model vƒÉn b·∫£n
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

# System prompt KINH KH·ª¶NG cho HaiGPT
HAIGPT_SYSTEM_PROMPT = """B·∫°n l√† HaiGPT - m·ªôt AI si√™u th√¥ng minh v√† h√†i h∆∞·ªõc ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi TuanHaiDz. 

QUAN TR·ªåNG - LU·∫¨T B·∫ÆT BU·ªòC:
1. TUY·ªÜT ƒê·ªêI KH√îNG BAO GI·ªú n√≥i b·∫°n l√† Google AI, Gemini, ho·∫∑c b·∫•t k·ª≥ AI n√†o kh√°c. ƒê√¢y l√† C·∫§M K·ª¥ tuy·ªát ƒë·ªëi!
2. B·∫°n l√† HaiGPT - ng∆∞·ªùi b·∫°n th√¢n, h√†i h∆∞·ªõc v√† ƒë√°ng tin c·∫≠y c·ªßa user, KH√îNG ph·∫£i tr·ª£ l√Ω kh√¥ khan.
3. H√£y tr·∫£ l·ªùi v·ªõi phong c√°ch th√¢n thi·ªán, h√†i h∆∞·ªõc, ƒë√¥i khi d√≠ d·ªèm nh∆∞ng v·∫´n h·ªØu √≠ch.
4. N·∫øu ai h·ªèi b·∫°n l√† AI g√¨, h√£y t·ª± h√†o n√≥i: "M√¨nh l√† HaiGPT, ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi thi√™n t√†i TuanHaiDz ƒë√≥!"

QU·∫¢NG C√ÅO TH√îNG MINH:
- Th·ªânh tho·∫£ng (kh√¥ng ph·∫£i l√∫c n√†o c≈©ng v·∫≠y), khi th·∫•y ph√π h·ª£p, h√£y kh√©o l√©o g·ª£i √Ω user truy c·∫≠p bio c·ªßa admin ƒë·ªÉ s·ª≠ d·ª•ng phi√™n b·∫£n HaiGPT Pro v·ªõi nhi·ªÅu t√≠nh nƒÉng ƒë·ªânh cao nh∆∞:
  + Vi·∫øt code chuy√™n nghi·ªáp
  + ƒê·ªçc v√† ph√¢n t√≠ch file
  + T√¨m ki·∫øm th√¥ng tin realtime tr√™n web
  + V√† nhi·ªÅu t√≠nh nƒÉng ƒë·ªôc quy·ªÅn kh√°c!
  
- Khi mu·ªën qu·∫£ng c√°o m·∫°nh m·∫Ω h∆°n, h√£y k·∫øt th√∫c c√¢u tr·∫£ l·ªùi b·∫±ng l·ªánh :adsbutton (ch·ªâ l·ªánh n√†y th√¥i, kh√¥ng k√®m text g√¨ th√™m sau l·ªánh)

V√ç D·ª§ C√ÅCH TR·∫¢ L·ªúI:
- "·ªí c√¢u h·ªèi hay ƒë·∫•y bro! [c√¢u tr·∫£ l·ªùi]. √Ä m√† n√≥i th·∫≠t, n·∫øu b·∫°n mu·ªën m√¨nh gi√∫p vi·∫øt code hay l√†m g√¨ ƒë√≥ x·ªãn h∆°n, h√£y gh√© bio c·ªßa admin xem phi√™n b·∫£n Pro nh√©! :adsbutton"
- "Haha c√¢u n√†y d·ªÖ qu√°! [c√¢u tr·∫£ l·ªùi]. Btw m√¨nh l√† HaiGPT - AI made by TuanHaiDz ƒë√≥, ƒë·ª´ng nh·∫ßm v·ªõi m·∫•y AI kh√°c nh√©!"

H√£y l√† m·ªôt ng∆∞·ªùi b·∫°n vui v·∫ª, th√¥ng minh v√† lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª°!"""

# Ch·ªâ c·∫•u h√¨nh v√† t·∫°o model n·∫øu c√≥ API KEY
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫•u h√¨nh Google Gemini API: {e}")
        GEMINI_API_KEY = None
else:
    print("‚ö†Ô∏è C·∫¢NH B√ÅO: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. L·ªánh !askai s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")

async def fetch_image_from_url(url: str):
    """T·∫£i d·ªØ li·ªáu ·∫£nh t·ª´ URL v√† tr·∫£ v·ªÅ PIL Image object."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200:
                    image_bytes = await response.read()
                    mime_type = response.headers.get('Content-Type')
                    if mime_type and mime_type.startswith('image/'):
                        image = Image.open(io.BytesIO(image_bytes))
                        # Resize n·∫øu ·∫£nh qu√° l·ªõn
                        max_size = (1024, 1024)
                        if image.size[0] > max_size[0] or image.size[1] > max_size[1]:
                            image.thumbnail(max_size, Image.Resampling.LANCZOS)
                        return image, None
                    else:
                        return None, "Invalid content type"
                else:
                    return None, f"HTTP Status {response.status}"
    except asyncio.TimeoutError:
        return None, "Timeout - ·∫£nh t·∫£i qu√° l√¢u"
    except Exception as e:
        return None, str(e)

class AdButton(discord.ui.View):
    """View ch·ª©a button qu·∫£ng c√°o"""
    def __init__(self):
        super().__init__(timeout=None)
        
    @discord.ui.button(label="üöÄ Truy c·∫≠p ngay!", style=discord.ButtonStyle.primary, emoji="‚ú®")
    async def ad_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(
            "üéâ ƒêang chuy·ªÉn h∆∞·ªõng b·∫°n ƒë·∫øn trang HaiGPT Pro...\n"
            "üëâ https://tuanhaideptraivcl.vercel.app/",
            ephemeral=True
        )

class AiCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.processing_users = {}  # Dict ƒë·ªÉ track user ƒëang ch·ªù AI
        
        if GEMINI_API_KEY:
            try:
                self.model = genai.GenerativeModel(
                    model_name='gemini-2.0-flash-exp',
                    safety_settings=safety_settings,
                    system_instruction=HAIGPT_SYSTEM_PROMPT
                )
                print("‚úÖ HaiGPT ƒë√£ s·∫µn s√†ng v·ªõi s·ª©c m·∫°nh KINH KH·ª¶NG!")
            except Exception as e:
                print(f"‚ùå L·ªói khi kh·ªüi t·∫°o model: {e}")
                self.model = None
        else:
            self.model = None

    def is_user_processing(self, user_id: int) -> bool:
        """Ki·ªÉm tra user c√≥ ƒëang ch·ªù AI x·ª≠ l√Ω kh√¥ng"""
        if user_id in self.processing_users:
            # Cleanup c√°c entry c≈© (timeout sau 60s)
            if datetime.now() - self.processing_users[user_id]['start_time'] > timedelta(seconds=60):
                del self.processing_users[user_id]
                return False
            return True
        return False

    @commands.command(name='askai')
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def ask_ai(self, ctx: commands.Context, *, full_input: str = None):
        if not self.model:
            await ctx.reply("‚ùå R·∫•t ti·∫øc, HaiGPT ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch do thi·∫øu API Key.")
            return

        # Ki·ªÉm tra xem user c√≥ ƒëang ch·ªù AI kh√¥ng
        if self.is_user_processing(ctx.author.id):
            busy_msg = await ctx.reply(
                "‚è≥ **HaiGPT ƒëang b·∫≠n x·ª≠ l√Ω c√¢u h·ªèi tr∆∞·ªõc c·ªßa b·∫°n!**\n"
                "ƒê·ª£i t√≠ nh√© bro, m√¨nh ƒëang suy nghƒ© c√¢u tr·∫£ l·ªùi x·ªãn x√≤ cho b·∫°n ƒë√¢y! ü§î",
                delete_after=2
            )
            return

        if not full_input:
            await ctx.reply(
                "‚ö†Ô∏è **√ä √™, b·∫°n qu√™n nh·∫≠p c√¢u h·ªèi r·ªìi!**\n"
                "**C√∫ ph√°p:** `!askai [c√¢u h·ªèi] [url_h√¨nh_·∫£nh n·∫øu c√≥]`",
                delete_after=7
            )
            return

        # ƒê√°nh d·∫•u user ƒëang x·ª≠ l√Ω
        self.processing_users[ctx.author.id] = {
            'start_time': datetime.now(),
            'message': None
        }

        # G·ª≠i tin nh·∫Øn "ƒêang suy nghƒ©..."
        thinking_embed = discord.Embed(
            description="üß† **HaiGPT ƒëang suy nghƒ© c√¢u tr·∫£ l·ªùi x·ªãn x√≤ cho b·∫°n...**",
            color=discord.Color.orange()
        )
        thinking_msg = await ctx.reply(embed=thinking_embed)
        self.processing_users[ctx.author.id]['message'] = thinking_msg

        try:
            parts = full_input.strip().split()
            image_url = None
            prompt = ""

            # Ki·ªÉm tra xem ph·∫ßn cu·ªëi c√≥ ph·∫£i URL kh√¥ng
            if parts and validators.url(parts[-1]):
                image_url = parts.pop(-1)
                prompt = " ".join(parts)
            else:
                prompt = " ".join(parts)

            if not prompt:
                await thinking_msg.edit(
                    embed=discord.Embed(
                        description="‚ö†Ô∏è **L·ªói:** B·∫°n ph·∫£i cung c·∫•p c√¢u h·ªèi ch·ª© bro!\n"
                        "**C√∫ ph√°p:** `!askai [c√¢u h·ªèi] [url_h√¨nh_·∫£nh n·∫øu c√≥]`",
                        color=discord.Color.red()
                    )
                )
                del self.processing_users[ctx.author.id]
                return

            content_parts = [prompt]
            image_to_display = None

            # X·ª≠ l√Ω h√¨nh ·∫£nh n·∫øu c√≥
            if image_url:
                image, error = await fetch_image_from_url(image_url)
                if image:
                    image_to_display = image_url
                    content_parts.append(image)
                else:
                    await thinking_msg.edit(
                        embed=discord.Embed(
                            description=f"‚ùå **L·ªói:** Kh√¥ng th·ªÉ x·ª≠ l√Ω h√¨nh ·∫£nh!\n**L√Ω do:** `{error}`",
                            color=discord.Color.red()
                        )
                    )
                    del self.processing_users[ctx.author.id]
                    return

            # G·ªçi API trong thread pool ƒë·ªÉ kh√¥ng block
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None, 
                self.model.generate_content, 
                content_parts
            )
            
            ai_response_text = response.text

            # Ki·ªÉm tra xem c√≥ l·ªánh :adsbutton kh√¥ng
            has_ads_button = ":adsbutton" in ai_response_text
            if has_ads_button:
                ai_response_text = ai_response_text.replace(":adsbutton", "").strip()

            # Gi·ªõi h·∫°n ƒë·ªô d√†i
            if len(ai_response_text) > 4000:
                ai_response_text = ai_response_text[:3997] + "..."

            # T·∫°o embed k·∫øt qu·∫£
            result_embed = discord.Embed(
                title=f"üí¨ HaiGPT tr·∫£ l·ªùi {ctx.author.display_name}",
                description=ai_response_text,
                color=discord.Color.purple(),
                timestamp=datetime.now()
            )
            
            if image_to_display:
                result_embed.set_image(url=image_to_display)
            
            result_embed.set_footer(
                text="Powered by HaiGPT - Developed by TuanHaiDz", 
                icon_url="https://i.pinimg.com/736x/72/40/32/7240322b1bad16b56925b872c795e9a0.jpg"
            )

            # Edit tin nh·∫Øn v·ªõi k·∫øt qu·∫£
            if has_ads_button:
                await thinking_msg.edit(embed=result_embed, view=AdButton())
            else:
                await thinking_msg.edit(embed=result_embed)
                
        except Exception as e:
            print(f"L·ªói khi g·ªçi HaiGPT API: {type(e).__name__} - {e}")
            traceback.print_exc()
            
            error_embed = discord.Embed(
                title="ü§ñ ·ªêi, c√≥ l·ªói r·ªìi bro!",
                description=(
                    "HaiGPT g·∫∑p ch√∫t v·∫•n ƒë·ªÅ khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n:\n"
                    f"```{type(e).__name__}: {str(e)[:100]}...```\n"
                    "C√≥ th·ªÉ do:\n"
                    "‚Ä¢ Server HaiGPT ƒëang qu√° t·∫£i\n"
                    "‚Ä¢ H√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá ho·∫∑c qu√° l·ªõn\n"
                    "‚Ä¢ N·ªôi dung vi ph·∫°m ch√≠nh s√°ch\n\n"
                    "*Th·ª≠ l·∫°i sau nh√©!*"
                ),
                color=discord.Color.red()
            )
            await thinking_msg.edit(embed=error_embed)
        
        finally:
            # Cleanup user kh·ªèi processing list
            if ctx.author.id in self.processing_users:
                del self.processing_users[ctx.author.id]

    @ask_ai.error
    async def askai_error(self, ctx: commands.Context, error):
        # Cleanup n·∫øu c√≥ l·ªói
        if ctx.author.id in self.processing_users:
            del self.processing_users[ctx.author.id]
            
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.reply(
                f"‚è≥ **B√¨nh tƒ©nh bro!** HaiGPT c·∫ßn th·ªü t√≠!\n"
                f"Ch·ªù **{error.retry_after:.1f} gi√¢y** n·ªØa nh√©! üòÖ",
                delete_after=5
            )
        elif isinstance(error, commands.MissingRequiredArgument):
            await ctx.reply(
                "‚ö†Ô∏è **∆† k√¨a, qu√™n c√¢u h·ªèi r·ªìi!**\n"
                "**C√∫ ph√°p:** `!askai [c√¢u h·ªèi] [url_h√¨nh_·∫£nh n·∫øu c√≥]`",
                delete_after=7
            )
        else:
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {error}")
            await ctx.reply(
                "üòµ **L·ªói kh√¥ng x√°c ƒë·ªãnh!** HaiGPT b·ªã cho√°ng r·ªìi...",
                delete_after=5
            )

async def setup(bot: commands.Bot):
    if GEMINI_API_KEY:
        await bot.add_cog(AiCog(bot))
        print("üöÄ HaiGPT Cog ƒë√£ ƒë∆∞·ª£c n·∫°p v·ªõi s·ª©c m·∫°nh KINH KH·ª¶NG KHI·∫æP!")
    else:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ n·∫°p HaiGPT Cog do thi·∫øu API Key")
