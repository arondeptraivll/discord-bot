import discord
from discord.ext import commands
import os
import google.generativeai as genai

# C·∫•u h√¨nh API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# --- THAY ƒê·ªîI L·ªöN: T·∫ÆT HO√ÄN TO√ÄN B·ªò L·ªåC AN TO√ÄN ---
# B·∫±ng c√°ch ƒë·∫∑t t·∫•t c·∫£ c√°c ng∆∞·ª°ng th√†nh "BLOCK_NONE", ch√∫ng ta y√™u c·∫ßu AI kh√¥ng ch·∫∑n b·∫•t k·ª≥ ph·∫£n h·ªìi n√†o.
# C·∫£nh b√°o: ƒêi·ªÅu n√†y c√≥ th·ªÉ cho ph√©p AI t·∫°o ra n·ªôi dung nh·∫°y c·∫£m.
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

# Ch·ªâ c·∫•u h√¨nh v√† t·∫°o model n·∫øu c√≥ API KEY
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
else:
    # In c·∫£nh b√°o m·ªôt l·∫ßn khi bot kh·ªüi ƒë·ªông n·∫øu kh√¥ng c√≥ key
    print("‚ö†Ô∏è C·∫¢NH B√ÅO: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. L·ªánh !askai s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")


class AiCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        # Ch·ªâ kh·ªüi t·∫°o model n·∫øu API key h·ª£p l·ªá
        if GEMINI_API_KEY:
            # S·ª≠ d·ª•ng safety_settings ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ·ªü tr√™n
            self.model = genai.GenerativeModel('gemini-pro', safety_settings=safety_settings)
        else:
            self.model = None

    @commands.command(name='askai')
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def ask_ai(self, ctx: commands.Context, *, prompt: str):
        if not self.model:
            await ctx.reply("‚ùå R·∫•t ti·∫øc, t√≠nh nƒÉng AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch do thi·∫øu API Key.")
            return

        async with ctx.typing():
            try:
                # G·ª≠i prompt t·ªõi Gemini v√† nh·∫≠n ph·∫£n h·ªìi
                response = await self.model.generate_content_async(prompt)
                
                # V·ªõi safety filter ƒë√£ t·∫Øt, vi·ªác truy c·∫≠p response.text s·∫Ω an to√†n h∆°n nhi·ªÅu
                ai_response_text = response.text

                # Ki·ªÉm tra ƒë·ªô d√†i ph·∫£n h·ªìi ƒë·ªÉ tr√°nh l·ªói c·ªßa Discord
                if len(ai_response_text) > 4000:
                    ai_response_text = ai_response_text[:4000] + "\n... (N·ªôi dung qu√° d√†i ƒë√£ ƒë∆∞·ª£c c·∫Øt b·ªõt)"

                # T·∫°o embed ƒë·ªÉ g·ª≠i l·∫°i cho ng∆∞·ªùi d√πng
                embed = discord.Embed(
                    title=f"üí¨ C√¢u tr·∫£ l·ªùi cho {ctx.author.display_name}",
                    description=ai_response_text,
                    color=discord.Color.purple()
                )
                embed.set_footer(text="Cung c·∫•p b·ªüi Google Gemini", icon_url="https://i.imgur.com/v4vL5V2.png")
                
                await ctx.reply(embed=embed)

            except Exception as e:
                # X·ª≠ l√Ω c√°c l·ªói chung kh√°c (v√≠ d·ª•: l·ªói m·∫°ng, API server down...)
                print(f"L·ªói khi g·ªçi Gemini API: {e}")
                error_embed = discord.Embed(
                    title="ü§ñ ƒê√£ c√≥ l·ªói b·∫•t ng·ªù",
                    description="Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n t·∫°i th·ªùi ƒëi·ªÉm n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=error_embed)

    @ask_ai.error
    async def askai_error(self, ctx: commands.Context, error):
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.reply(f"‚è≥ B·∫°n ƒëang thao t√°c qu√° nhanh! Vui l√≤ng ch·ªù **{error.retry_after:.1f} gi√¢y**.", delete_after=5)
        elif isinstance(error, commands.MissingRequiredArgument):
            await ctx.reply("‚ö†Ô∏è B·∫°n qu√™n nh·∫≠p c√¢u h·ªèi r·ªìi! C√∫ ph√°p: `!askai [c√¢u h·ªèi c·ªßa b·∫°n]`", delete_after=5)
        else:
            # Ghi log c√°c l·ªói kh√¥ng x√°c ƒë·ªãnh ƒë·ªÉ debug
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong l·ªánh !askai: {error}")

async def setup(bot):
    # Ch·ªâ th√™m Cog n·∫øu API Key t·ªìn t·∫°i v√† h·ª£p l·ªá
    if GEMINI_API_KEY:
        await bot.add_cog(AiCog(bot))
    else:
        # Cog s·∫Ω kh√¥ng ƒë∆∞·ª£c t·∫£i n·∫øu thi·∫øu key, th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c in ·ªü tr√™n
        pass
