# ai_cog.py
import discord
from discord.ext import commands
import os
import google.generativeai as genai
from google.api_core import exceptions as google_exceptions
import validators
import aiohttp
import io

# C·∫•u h√¨nh API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# T·∫Øt b·ªô l·ªçc an to√†n
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

# Ch·ªâ c·∫•u h√¨nh v√† t·∫°o model n·∫øu c√≥ API KEY
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫•u h√¨nh Google Gemini API: {e}")
        GEMINI_API_KEY = None
else:
    print("‚ö†Ô∏è C·∫¢NH B√ÅO: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. L·ªánh !askai s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")

async def fetch_image_from_url(url: str):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    image_bytes = await response.read()
                    mime_type = response.headers.get('Content-Type')
                    if mime_type and mime_type.startswith('image/'):
                        return image_bytes, mime_type
                    else:
                        return None, "Invalid content type"
                else:
                    return None, f"HTTP Status {response.status}"
    except Exception as e:
        return None, str(e)

class AiCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        if GEMINI_API_KEY:
            self.text_model = genai.GenerativeModel(
                model_name='gemini-2.5-pro',
                safety_settings=safety_settings
            )
            # ====> GI·∫¢I PH√ÅP: D√ôNG MODEL T·∫†O ·∫¢NH ·ªîN ƒê·ªäNH V√Ä T∆Ø∆†NG TH√çCH <====
            self.image_model = genai.GenerativeModel(
                model_name='models/imagen-2-generate-preview-0025'
            )
        else:
            self.text_model = None
            self.image_model = None
            
    # ====> C√îNG C·ª§ CH·∫®N ƒêO√ÅN M·ªöI: LI·ªÜT K√ä C√ÅC MODEL KH·∫¢ D·ª§NG <====
    @commands.command(name='listmodels', hidden=True)
    @commands.is_owner() # Ch·ªâ ch·ªß bot m·ªõi ƒë∆∞·ª£c d√πng l·ªánh n√†y
    async def list_models(self, ctx: commands.Context):
        """Li·ªát k√™ c√°c model m√† API Key n√†y c√≥ th·ªÉ s·ª≠ d·ª•ng v·ªõi ph∆∞∆°ng th·ª©c generateContent."""
        await ctx.send("üîç ƒêang truy v·∫•n danh s√°ch c√°c model kh·∫£ d·ª•ng t·ª´ Google. Vui l√≤ng ƒë·ª£i...")
        try:
            model_list = []
            for m in genai.list_models():
                # Ch·ªâ l·∫•y c√°c model h·ªó tr·ª£ ph∆∞∆°ng th·ª©c m√† ch√∫ng ta ƒëang d√πng
                if 'generateContent' in m.supported_generation_methods:
                    model_list.append(f"- `{m.name}`")
            
            if not model_list:
                await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y model n√†o kh·∫£ d·ª•ng cho API Key n√†y.")
                return

            description = "\n".join(model_list)
            
            embed = discord.Embed(
                title="‚úÖ C√°c Model Kh·∫£ D·ª•ng",
                description="ƒê√¢y l√† danh s√°ch c√°c model m√† API Key c·ªßa b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng v·ªõi bot n√†y:",
                color=discord.Color.green()
            )
            
            # Chia nh·ªè tin nh·∫Øn n·∫øu danh s√°ch qu√° d√†i
            if len(description) > 4000:
                parts = [description[i:i+4000] for i in range(0, len(description), 4000)]
                for i, part in enumerate(parts):
                    embed.description = part
                    if i == 0:
                        embed.title = f"‚úÖ C√°c Model Kh·∫£ D·ª•ng (Ph·∫ßn {i+1})"
                    await ctx.author.send(embed=embed) # G·ª≠i tin nh·∫Øn ri√™ng ƒë·ªÉ kh√¥ng spam k√™nh
            else:
                embed.description = description
                await ctx.author.send(embed=embed)
            
            await ctx.message.add_reaction('‚úÖ')

        except Exception as e:
            await ctx.send(f"‚ùå ƒê√£ c√≥ l·ªói khi truy v·∫•n model: `{e}`")

    @commands.command(name='genimage')
    @commands.cooldown(1, 30, commands.BucketType.user)
    async def generate_image(self, ctx: commands.Context, *, prompt: str):
        if not self.image_model:
            await ctx.reply("‚ùå R·∫•t ti·∫øc, t√≠nh nƒÉng t·∫°o ·∫£nh ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch do thi·∫øu API Key.")
            return

        waiting_message = await ctx.reply(f"üé® ƒêang v·∫Ω tranh theo y√™u c·∫ßu c·ªßa b·∫°n: `{prompt}`...")

        try:
            def generation_func():
                return self.image_model.generate_content(prompt)

            response = await self.bot.loop.run_in_executor(None, generation_func)
            image_bytes = response.images[0]._image_bytes
            image_file = discord.File(fp=io.BytesIO(image_bytes), filename="generated_image.png")
            
            embed = discord.Embed(
                title=f"üñºÔ∏è ·∫¢nh c·ªßa {ctx.author.display_name} ƒë√¢y",
                color=discord.Color.random()
            )
            embed.set_image(url="attachment://generated_image.png")
            # C·∫≠p nh·∫≠t footer cho ƒë√∫ng model ƒëang d√πng
            embed.set_footer(text="T·∫°o b·ªüi Google Imagen 2", icon_url="https://i.imgur.com/v4vL5V2.png")

            await waiting_message.delete()
            await ctx.reply(embed=embed, file=image_file)

        except Exception as e:
            await waiting_message.delete()
            print(f"L·ªñI CHI TI·∫æT KHI T·∫†O ·∫¢NH: {type(e).__name__} - {e}")
            await ctx.reply(f"‚ùå R·∫•t ti·∫øc, kh√¥ng th·ªÉ t·∫°o ·∫£nh. L·ªói t·ª´ Google: `{str(e)}`")

    @generate_image.error
    # ... (ph·∫ßn code n√†y kh√¥ng ƒë·ªïi)
    async def genimage_error(self, ctx: commands.Context, error):
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.reply(f"‚è≥ B·∫°n ƒëang thao t√°c qu√° nhanh! Vui l√≤ng ch·ªù **{error.retry_after:.1f} gi√¢y**.", delete_after=5)
        elif isinstance(error, commands.MissingRequiredArgument):
            await ctx.reply("‚ö†Ô∏è B·∫°n qu√™n nh·∫≠p n·ªôi dung ƒë·ªÉ v·∫Ω ·∫£nh r·ªìi! C√∫ ph√°p: `!genimage [n·ªôi dung b·∫°n mu·ªën v·∫Ω]`", delete_after=7)
        else:
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong l·ªánh genimage: {error}")
            await ctx.reply("ƒê√£ x·∫£y ra m·ªôt l·ªói c√∫ ph√°p ho·∫∑c logic trong n·ªôi b·ªô bot.", delete_after=5)

    # L·ªánh !askai kh√¥ng thay ƒë·ªïi
    @commands.command(name='askai')
    # ... (ph·∫ßn code n√†y kh√¥ng ƒë·ªïi)
    async def ask_ai(self, ctx: commands.Context, *, full_input: str):
        if not self.text_model:
            await ctx.reply("‚ùå R·∫•t ti·∫øc, t√≠nh nƒÉng AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch do thi·∫øu API Key.")
            return

        async with ctx.typing():
            parts = full_input.strip().split()
            image_url = None
            prompt = ""

            if validators.url(parts[-1]):
                image_url = parts.pop(-1)
                prompt = " ".join(parts)
            else:
                prompt = " ".join(parts)

            if not prompt:
                await ctx.reply(
                    "‚ö†Ô∏è **L·ªói:** B·∫°n ph·∫£i cung c·∫•p c√¢u h·ªèi.\n"
                    "**C√∫ ph√°p ƒë√∫ng:** `!askai [c√¢u h·ªèi b·∫Øt bu·ªôc] [url_h√¨nh_·∫£nh t√πy ch·ªçn]`",
                    delete_after=10
                )
                return

            content_parts = []
            image_to_display = None

            if image_url:
                image_bytes, mime_type_or_error = await fetch_image_from_url(image_url)
                if image_bytes:
                    image_to_display = image_url
                    image_part = {"mime_type": mime_type_or_error, "data": image_bytes}
                    content_parts.append(image_part)
                else:
                    await ctx.reply(f"‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω h√¨nh ·∫£nh t·ª´ URL. L√Ω do: `{mime_type_or_error}`")
                    return
            
            content_parts.append(prompt)

            try:
                response = await self.text_model.generate_content_async(content_parts)
                ai_response_text = response.text

                if len(ai_response_text) > 4000:
                    ai_response_text = ai_response_text[:4000] + "\n... (N·ªôi dung qu√° d√†i ƒë√£ ƒë∆∞·ª£c c·∫Øt b·ªõt)"

                embed = discord.Embed(
                    title=f"üí¨ C√¢u tr·∫£ l·ªùi cho {ctx.author.display_name}",
                    description=ai_response_text,
                    color=discord.Color.purple()
                )
                
                if image_to_display:
                    embed.set_image(url=image_to_display)
                
                embed.set_footer(text="Cung c·∫•p b·ªüi Google Gemini 2.5 Pro", icon_url="https://i.imgur.com/v4vL5V2.png")
                
                await ctx.reply(embed=embed)
                
            except Exception as e:
                print(f"L·ªói khi g·ªçi Gemini API: {type(e).__name__} - {e}")
                error_embed = discord.Embed(
                    title="ü§ñ ƒê√£ c√≥ l·ªói b·∫•t ng·ªù",
                    description="Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. ƒêi·ªÅu n√†y c√≥ th·ªÉ do:\n- L·ªói t·ª´ m√°y ch·ªß AI.\n- H√¨nh ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c qu√° l·ªõn.\n- C√¢u h·ªèi c·ªßa b·∫°n vi ph·∫°m ch√≠nh s√°ch n·ªôi dung c·ªßa AI.",
                    color=discord.Color.red()
                )
                await ctx.reply(embed=error_embed)
                return 

    @ask_ai.error
    # ... (ph·∫ßn code n√†y kh√¥ng ƒë·ªïi)
    async def askai_error(self, ctx: commands.Context, error):
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.reply(f"‚è≥ B·∫°n ƒëang thao t√°c qu√° nhanh! Vui l√≤ng ch·ªù **{error.retry_after:.1f} gi√¢y**.", delete_after=5)
        elif isinstance(error, commands.MissingRequiredArgument):
            await ctx.reply(
                "‚ö†Ô∏è **B·∫°n qu√™n nh·∫≠p c√¢u h·ªèi r·ªìi!**\n"
                "**C√∫ ph√°p:** `!askai [c√¢u h·ªèi b·∫Øt bu·ªôc] [url_h√¨nh_·∫£nh t√πy ch·ªçn]`", 
                delete_after=7
            )
        else:
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi askai_error: {error}")
            await ctx.reply("ƒê√£ x·∫£y ra m·ªôt l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.", delete_after=5)

async def setup(bot: commands.Bot):
    if GEMINI_API_KEY:
        await bot.add_cog(AiCog(bot))
    else:
        pass
